// Generated by CoffeeScript 1.6.3
(function() {
  var assert, exports;

  assert = require("assert");

  module.exports = exports = function(schema) {
    schema.add({
      owner_id: {
        type: String,
        trim: true,
        require: true
      }
    });
    schema.statics['findByIdAndOwnerId'] = function(id, ownerId, callback) {
      assert('function' === typeof callback, "missing callback");
      if (!(('string' === typeof id) && ('string' === typeof ownerId) && id && ownerId)) {
        return callback(new Error("bad arguments. id:" + id + ", ownerId:" + ownerId));
      }
      this.findById(id, function(err, item) {
        if (err != null) {
          return callback(err);
        }
        if (!item) {
          return callback(new Error("" + id + " not found"));
        }
        if (item.owner_id !== ownerId) {
          return callback(new Error("" + id + " permission denied"));
        }
        return callback(null, item);
      });
    };
    schema.statics['findAllByOwnerId'] = function(ownerId, callback) {
      assert('function' === typeof callback, "missing callback");
      if (!(('string' === typeof ownerId) && ownerId)) {
        return callback(new Error("bad arguments. ownerId:" + ownerId));
      }
      this.find({
        owner_id: ownerId
      }, callback);
    };
    schema.statics['countByOwnerId'] = function(ownerId, callback) {
      assert('function' === typeof callback, "missing callback");
      if (!(('string' === typeof ownerId) && ownerId)) {
        return callback(new Error("bad arguments. ownerId:" + ownerId));
      }
      return this.count({
        owner_id: ownerId
      }, callback);
    };
  };

}).call(this);
